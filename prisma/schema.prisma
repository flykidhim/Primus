// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  EDITOR
}

model Player {
  id          String   @id @default(cuid())
  name        String
  position    String       // GK | DF | MF | FW (free text for flexibility)
  number      Int
  nationality String?
  heightCm    Int?
  bio         String?
  photoUrl    String?      // main portrait
  appearances Int      @default(0)  // GP (games played)
  goals       Int      @default(0)
  assists     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  photos      PlayerImage[]
}

model PlayerImage {
  id        String   @id @default(cuid())
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  String
  url       String
  alt       String?
  sort      Int      @default(0)
  createdAt DateTime @default(now())

  @@index([playerId, sort])
}

model Match {
  id          String   @id @default(cuid())
  date        DateTime
  competition String
  home        String
  away        String
  venue       String?
  status      String   @default("SCHEDULED") // SCHEDULED | FT | LIVE etc.
  homeScore   Int      @default(0)
  awayScore   Int      @default(0)
  report      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([date])
  @@index([competition])
}

model Article {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String?
  content   String
  coverUrl  String?
  category  String   @default("Club News")
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, createdAt])
  @@index([published, createdAt])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  priceCents  Int
  imageUrl    String?     // primary/cover image
  description String?
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images      ProductImage[]
}

model ProductImage {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  alt       String?
  sort      Int      @default(0)
  createdAt DateTime @default(now())

  @@index([productId, sort])
}

model Media {
  id        String   @id @default(cuid())
  title     String
  type      String           // photo | video | reel etc.
  url       String
  category  String?          // optional organization: Training | Matchday | Press
  createdAt DateTime @default(now())

  @@index([type, createdAt])
  @@index([category, createdAt])
}

model Standing {
  id        String   @id @default(cuid())
  team      String
  played    Int
  won       Int
  drawn     Int
  lost      Int
  gf        Int
  ga        Int
  gd        Int
  points    Int
  position  Int
  season    String
  updatedAt DateTime @updatedAt

  @@index([season, position])
}
